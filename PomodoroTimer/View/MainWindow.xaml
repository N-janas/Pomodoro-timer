<Window x:Class="PomodoroTimer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PomodoroTimer"
        xmlns:vm="clr-namespace:PomodoroTimer.ViewModel"
        xmlns:vmcv="clr-namespace:PomodoroTimer.ViewModel.Converters"
        mc:Ignorable="d"
        WindowStyle="SingleBorderWindow"
        Background="Transparent"
        WindowStartupLocation="CenterScreen"
        MinHeight="450"
        MinWidth="800"
        Title="Pomodoro Timer" Height="450" Width="800">
    <Window.Resources>
        <!--Viewmodel and converter-->
        <vmcv:BoolToVisibilityConverter x:Key="convVisibility"/>
        <vmcv:TimeToStringTimeConverter x:Key="convTimeString"/>
        <vmcv:ModeWorkTimeToBoolConverter x:Key="convWorkTime"/>
        <vmcv:ModeShortBreakToBoolConverter x:Key="convShortBreak"/>
        <vmcv:ModeLongBreakToBoolConverter x:Key="convLongBreak"/>
        <vm:TimerViewModel x:Key="timer"/>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <!--Rounded start pause button-->
        <Style x:Key="ButtonStyleRounded" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="20" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#3F3FD4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#3F3FD4"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#8A8AE5"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#8A8AE5"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Icon buttons to show transparent background when mouse over-->
        <Style x:Key="ButtonWithoutBorder" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="20" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#59ffffff"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#59ffffff"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#84ffffff"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#84ffffff"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Toggle buttons for mode changing--> 
        <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" CornerRadius="8" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#81ffffff"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#81ffffff"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#81ffffff"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#81ffffff"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="#FF11A42C"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF11A42C"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#ffffffff"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <!--App grid-->
    <Grid DataContext="{StaticResource timer}">
        <Grid.Background>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                <GradientStop Color="#270c42" Offset="0.0"/>
                <GradientStop Color="#100d42" Offset="0.3"/>
                <GradientStop Color="#0b0930" Offset="0.6"/>
                <GradientStop Color="#1a0430" Offset="1.0"/>
            </LinearGradientBrush>
        </Grid.Background>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="4*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>

        <!--Title and modes-->
        <StackPanel Grid.Column="0">
            <Viewbox HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label Content="Pomodoro Timer" FontFamily="Roboto" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" Margin="0,5,0,0"/>
            </Viewbox>
            <!--Modes-->
            <Label Content="Modes" FontFamily="Roboto" FontSize="27" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" Margin="5,50,5,0"/>
            <Border BorderBrush="#59ffffff" Background="#59ffffff" BorderThickness="1" 
                    CornerRadius="16" Margin="5,0,5,5">
                <StackPanel>
                    <RadioButton x:Name="WorkTimeBtn" GroupName="Modes" Style="{DynamicResource ToggleButtonStyle1}"
                                 Content="Work Time" Foreground="White" FontFamily="Roboto" FontSize="28"
                                 Margin="20" Background="Transparent" BorderBrush="Transparent"
                                 IsChecked="{Binding VisibleTimeMode, Converter={StaticResource convWorkTime}, Mode=OneWay}"
                                 Command="{Binding TurnOnWorkTime}"/>
                    <RadioButton x:Name="ShortBreakBtn" GroupName="Modes" Style="{DynamicResource ToggleButtonStyle1}"
                                 Content="Short break" Foreground="White" FontFamily="Roboto" FontSize="28"
                                 Margin="20" Background="Transparent" BorderBrush="Transparent"
                                 IsChecked="{Binding VisibleTimeMode, Converter={StaticResource convShortBreak}, Mode=OneWay}"
                                 Command="{Binding TurnOnShortBreak}"/>
                    <RadioButton x:Name="LongBreakBtn" GroupName="Modes" Style="{DynamicResource ToggleButtonStyle1}"
                                 Content="Long break" Foreground="White" FontFamily="Roboto" FontSize="28"
                                 Margin="20" Background="Transparent" BorderBrush="Transparent"
                                 IsChecked="{Binding VisibleTimeMode, Converter={StaticResource convLongBreak}, Mode=OneWay}"
                                 Command="{Binding TurnOnLongBreak}"/>
                </StackPanel>
            </Border>

        </StackPanel>

        <!--Timer-->
        <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="5*"/>
                <RowDefinition Height="1*"/>
            </Grid.RowDefinitions>

            <!--Timer and start pause button-->
            <Grid Grid.Row="0">
                <Border BorderBrush="#59ffffff" Background="#59ffffff" BorderThickness="1" CornerRadius="16" Margin="20,40">
                    <Grid Margin="20">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="6*"/>
                            <RowDefinition Height="3*"/>
                        </Grid.RowDefinitions>
                        <!--Timer-->
                        <Grid Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Label FontFamily="Roboto" FontSize="120"
                                   Foreground="White" FontWeight="Bold" HorizontalAlignment="Center">
                                <Label.Content>
                                    <MultiBinding Converter="{StaticResource convTimeString}" Mode="OneWay">
                                        <Binding Path="Minutes"/>
                                        <Binding Path="Seconds"/>
                                    </MultiBinding>
                                </Label.Content>
                            </Label>

                        </Grid>

                        <!--Button-->
                        <Grid Grid.Row="1">
                            <Button Background="MidnightBlue" BorderBrush="MidnightBlue" 
                                    Content="{Binding StartButtonContent}"
                                    FontFamily="Roboto"
                                    FontSize="50"
                                    Foreground="White"
                                    FontWeight="Bold" Style="{DynamicResource ButtonStyleRounded}"
                                    Command="{Binding StartPause}">
                            </Button>
                        </Grid>
                    </Grid>
                </Border>
            </Grid>

            <!--Skip button-->
            <Grid Grid.Row="1">
                <Button HorizontalAlignment="Center" Background="Transparent" BorderThickness="0" Margin="0,0,0,5"
                        Style="{DynamicResource ButtonWithoutBorder}"
                        Visibility="{Binding SkipVisible, Converter={StaticResource convVisibility}, Mode=OneWay}"
                        Command="{Binding Skip}">
                    <Button.Content>
                        <Image Source="..\Resources\skip_w.png"/>
                    </Button.Content>
                </Button>
            </Grid>
        </Grid>
        <!--Settings-->
        <Grid Grid.Column="2" VerticalAlignment="Bottom" HorizontalAlignment="Right">
            <Button HorizontalAlignment="Center" Background="Transparent" Width="50" Margin="0,100,5,5" BorderThickness="0" 
                    Style="{DynamicResource ButtonWithoutBorder}">
                <Button.Content>
                    <Image Source="..\Resources\cog_w.png"/>
                </Button.Content>
            </Button>
        </Grid>

    </Grid>
</Window>
